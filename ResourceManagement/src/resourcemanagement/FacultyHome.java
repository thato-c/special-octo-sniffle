/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package resourcemanagement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tchit
 */
public class FacultyHome extends javax.swing.JFrame {

    /**
     * Creates new form FacultyHome
     */
    public FacultyHome() {
        initComponents();
        getFacultyMembers();
        getDepartmentHeads();
        getStudents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        courseScheduleTable = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        cbStudentName = new javax.swing.JComboBox<String>();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfStudentGrade = new javax.swing.JTextField();
        lbCourseName = new javax.swing.JLabel();
        lbCourseCredits = new javax.swing.JLabel();
        lbCourseMaterial = new javax.swing.JLabel();
        btnUploadGrade = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taStudentMessage = new javax.swing.JTextArea();
        btnMessageStudent = new javax.swing.JButton();
        cbCourseCode = new javax.swing.JComboBox<String>();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        departmentTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Student Page");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Email", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Student", jPanel1);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setText("Course Page");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel16.setText("Course Schedule");

        courseScheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Day", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(courseScheduleTable);

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel17.setText("Course Management Page");

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        cbStudentName.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Student 1", "Student 2", "Student 3", "Student 4" }));
        cbStudentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbStudentNameActionPerformed(evt);
            }
        });

        jLabel2.setText("Student Name");

        jLabel6.setText("Student Grade");

        lbCourseName.setText("Course Name");

        lbCourseCredits.setText("Course Credits");

        lbCourseMaterial.setText("Course Material");

        btnUploadGrade.setText("Upload Grade");
        btnUploadGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadGradeActionPerformed(evt);
            }
        });

        jLabel11.setText("Message");

        taStudentMessage.setColumns(20);
        taStudentMessage.setRows(5);
        jScrollPane3.setViewportView(taStudentMessage);

        btnMessageStudent.setText("Message Student");
        btnMessageStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMessageStudentActionPerformed(evt);
            }
        });

        cbCourseCode.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Course 1", "Course 2", "Course 3", "Course 4" }));
        cbCourseCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCourseCodeActionPerformed(evt);
            }
        });

        jButton3.setText("Select File");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(252, 252, 252))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(138, 138, 138))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lbCourseMaterial, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbCourseCredits, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(cbCourseCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))
                        .addGap(51, 51, 51)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(71, 71, 71)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(tfStudentGrade)
                                        .addGap(99, 99, 99)
                                        .addComponent(btnUploadGrade)
                                        .addGap(19, 19, 19))
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnMessageStudent))
                                            .addComponent(cbStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(cbCourseCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbCourseName)
                        .addGap(18, 18, 18)
                        .addComponent(lbCourseCredits)
                        .addGap(18, 18, 18)
                        .addComponent(lbCourseMaterial)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfStudentGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUploadGrade))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnMessageStudent)))
                .addGap(24, 24, 24)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 65, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Course", jPanel2);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Faculty Page");

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Email", "Phone Number", "Faculty"
            }
        ));
        jScrollPane4.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(253, 253, 253)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Faculty", jPanel3);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setText("Department Page");

        departmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Email", "Phone Number"
            }
        ));
        jScrollPane5.setViewportView(departmentTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(215, 215, 215))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Department", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbCourseCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCourseCodeActionPerformed
        String selectedItem = (String) cbCourseCode.getSelectedItem();
        String courseQuery = "SELECT * FROM Course WHERE Code=?";
        
        try (Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(courseQuery)){
            
            preparedStatement.setString(1, selectedItem);
            try (ResultSet resultSet = preparedStatement.executeQuery()){
                
                lbCourseName.setText(resultSet.getString("Course_Name"));
                lbCourseCredits.setText(resultSet.getString("Credits"));
                int courseId = resultSet.getInt("Course_Id");
                getCourseMaterial(courseId);
                getCourseEnrolment(courseId);
                getCourseSchedule(courseId);
                
            }
                
            
        } catch (SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_cbCourseCodeActionPerformed

    private void btnUploadGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadGradeActionPerformed
        String enrolmentQuery = "UPDATE Enrolment SET Grade = ? WHERE Student_Id=?";
        String assignedGrade = tfStudentGrade.getText();
        int StudentId = getStudentId();
        
        try (Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(enrolmentQuery)){
            
            preparedStatement.setString(1, assignedGrade);
            preparedStatement.setInt(1, StudentId);
            
            int rowsUpdated = preparedStatement.executeUpdate();
        
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this,
                    cbStudentName.getSelectedItem() + " has been graded " + assignedGrade,
                    "Select row",
                    JOptionPane.ERROR_MESSAGE); 
            } else {
                JOptionPane.showMessageDialog(this,
                    " No student found with ID: " + StudentId,
                    "Select row",
                    JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (SQLException e){
            
        }
    }//GEN-LAST:event_btnUploadGradeActionPerformed

    private void btnMessageStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMessageStudentActionPerformed
        String selectedItem = (String) cbStudentName.getSelectedItem();
        String message = taStudentMessage.getText();
        
        if (message.isEmpty()){
            JOptionPane.showMessageDialog(this,
                    "Message is empty",
                    "Select row",
                    JOptionPane.ERROR_MESSAGE); 
        } else {
            JOptionPane.showMessageDialog(this,
                    "Message: " + message + " has been sent to " + selectedItem,
                    "Success:Message Sent",
                    JOptionPane.ERROR_MESSAGE); 
        }
        
    }//GEN-LAST:event_btnMessageStudentActionPerformed

    private void cbStudentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbStudentNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbStudentNameActionPerformed

    private void getCourseSchedule(int courseId ){
        String courseScheduleQuery = "SELECT * FROM Schedule WHERE Course_Id=?";
        
        try (Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(courseScheduleQuery)){
            
            preparedStatement.setInt(1, courseId);
            
            try (ResultSet resultSet = preparedStatement.executeQuery()){
                
                DefaultTableModel model = (DefaultTableModel) courseScheduleTable.getModel();
                model.setRowCount(0);
                
                while (resultSet.next()){
                    
                    String startTime = resultSet.getString("Scheduled_Time");
                    String day = resultSet.getString("Scheduled_Day");
                    
                    model.addRow(new Object[]{day, startTime});
                }
            }
            
        } catch (SQLException ex){
            ex.printStackTrace();
        }
    }
    
    private void getCourseMaterial(int courseId){
        String materialQuery = "SELECT * FROM Course_Material WHERE Course_Id=?";
        
        try (Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(materialQuery);
                ){
            
            preparedStatement.setInt(1, courseId);
            
            try (ResultSet resultSet = preparedStatement.executeQuery()){
                while (resultSet.next()){
                String material = resultSet.getString("Name");
                lbCourseMaterial.setText(material);
                }
            }    
            
        } catch (SQLException e){
            e.printStackTrace();
        }
    }
    
    private void getCourseNames(int facultyId){
        String courseQuery = "SELECT * FROM Course WHERE Faculty_Id=?";
        String[] facultyMemberCourses = new String[]{};
        
        try (Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(courseQuery)){
            
            preparedStatement.setInt(1, facultyId);
            try (ResultSet resultSet = preparedStatement.executeQuery()){
                while (resultSet.next()){
                    
                    
                    String[] newValue = new String[]{resultSet.getString("Code")};
                    String[] allValues = new String[facultyMemberCourses.length + 1];
                    System.arraycopy(facultyMemberCourses, 0, allValues, 0, facultyMemberCourses.length);
                    System.arraycopy(newValue, 0, allValues, facultyMemberCourses.length, newValue.length);
                    
                    DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>(allValues);
                    cbCourseCode.setModel(comboBoxModel);
                }
            }
            
        } catch (SQLException e){
            e.printStackTrace();
        }
    }   
    
    private void getCourseEnrolment(int courseId){
        String enrolmentQuery = "SELECT * FROM Enrollment WHERE Course_Id=?";
        String[] studentNames = new String[]{};
        
        try (Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(enrolmentQuery);
                ){
            
            preparedStatement.setInt(1, courseId);
            
            try (ResultSet resultSet = preparedStatement.executeQuery()){
                while (resultSet.next()){
                    getStudentName(resultSet.getInt("Student_Id"), studentNames);
                }
            }    
            
        } catch (SQLException e){
            e.printStackTrace();
        }
    }
    
    private void getStudentName(int StudentId, String[] studentNames){
        String studentQuery = "SELECT * FROM Student WHERE Student_Id=?";

        try(Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(studentQuery)){
            
                preparedStatement.setInt(1, StudentId);
            
                try (ResultSet resultSet = preparedStatement.executeQuery()){
                    String[] newValue = new String[]{resultSet.getString("First_Name")};
                    String[] allValues = new String[studentNames.length + 1];
                    System.arraycopy(studentNames, 0, allValues, 0, studentNames.length);
                    System.arraycopy(newValue, 0, allValues, studentNames.length, newValue.length);
                    DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>(allValues);
                    cbStudentName.setModel(comboBoxModel);
                }   
        } catch (SQLException e){
            e.printStackTrace();
        }
    }
    
    private void getDepartmentHeads(){
        String departmentQuery = "SELECT * FROM Department_Heads";
        
        try (Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(departmentQuery);
                ResultSet resultSet = preparedStatement.executeQuery()){
            
            DefaultTableModel model = (DefaultTableModel) departmentTable.getModel();
            
            // Clear the table data before populating it with new data
            model.setRowCount(0);
            
            while (resultSet.next()){
                String firstName = resultSet.getString("First_Name");
                String lastName = resultSet.getString("Last_Name");
                String email = resultSet.getString("Email");
                String phoneNumber = resultSet.getString("Phone_Number");
                
                // Add the retrieved data to the table model
                model.addRow(new Object[]{firstName, lastName, email, phoneNumber});
            }
            
        } catch (SQLException e){
            e.printStackTrace();
        }
    }
    
    private void getFacultyMembers(){
        String facultyMemberQuery = "SELECT * FROM Faculty_Member";
        
        try (Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(facultyMemberQuery);
                ResultSet resultSet = preparedStatement.executeQuery()){
            
            DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
            
            // Clear the table data before populating it with new data
            model.setRowCount(0);
            
            while (resultSet.next()){
                String firstName = resultSet.getString("First_Name");
                String lastName = resultSet.getString("Last_Name");
                String email = resultSet.getString("Email");
                String phoneNumber = resultSet.getString("Phone_Number");
                String faculty = getUserFaculty(resultSet.getInt("Faculty_Id"));
                
                // Add the retrieved data to the table model
                model.addRow(new Object[]{firstName, lastName, email, phoneNumber, faculty});
            }
        } catch (SQLException e){
            e.printStackTrace();
        }
    }
    
    private String getUserFaculty(int facultyId){
        String facultyQuery = "SELECT Faculty_Name WHERE Faculty_Id=?";
        
        try (Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(facultyQuery)){
            
            preparedStatement.setInt(1, facultyId);
            
            try(ResultSet resultSet = preparedStatement.executeQuery()){
                
                String faculty = resultSet.getString("Faculty_Name");
                getCourseNames(facultyId);
                return faculty;
            }
            
        } catch (SQLException e){
            e.printStackTrace();
            return "Unassigned";
        }
    }
    
    private void getStudents(){
        String studentQuery = "SELECT * FROM Student";
        
        try(Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(studentQuery);
                ResultSet resultSet = preparedStatement.executeQuery()){
            
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            
            // Clear the table data before populating it with new data
            model.setRowCount(0);
            
            while (resultSet.next()){
                String firstName = resultSet.getString("First_Name");
                String lastName = resultSet.getString("Last_Name");
                String email = resultSet.getString("Email");
                String grade = getStudentGrade(resultSet.getInt("Student_Id"));
                
                // Add the retrieved data to the table model
                model.addRow(new Object[]{firstName, lastName, email, grade});
                
            }
            
        } catch (SQLException e){
            e.printStackTrace();
        }
    }
    
    private String getStudentGrade(int studentId){
        String enrolmentQuery = "SELECT Grade FROM Enrollment WHERE Student_Id=?";
        
        try(Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(enrolmentQuery)){
            
            preparedStatement.setInt(1, studentId);
            
            try (ResultSet resultSet = preparedStatement.executeQuery()){
                String Grade = resultSet.getString("Grade");
                return Grade;
            }
            
        } catch (SQLException e){
            e.printStackTrace();
            return "N/A";
        }
    }
    
    private int getStudentId(){
        String selectedItem = (String) cbStudentName.getSelectedItem();
        String studentQuery = "SELECT Student_Id FROM Student WHERE First_Name=?";
        
        try (Connection connection = ResourceManagement.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(studentQuery)){
            
            preparedStatement.setString(1, selectedItem);
            
            try (ResultSet resultSet = preparedStatement.executeQuery()){
                int studentId = resultSet.getInt("Student_Id");
                return studentId;
            }
            
        } catch (SQLException e){
            e.printStackTrace();
            return 1;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FacultyHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FacultyHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FacultyHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FacultyHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FacultyHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMessageStudent;
    private javax.swing.JButton btnUploadGrade;
    private javax.swing.JComboBox<String> cbCourseCode;
    private javax.swing.JComboBox<String> cbStudentName;
    private javax.swing.JTable courseScheduleTable;
    private javax.swing.JTable departmentTable;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JLabel lbCourseCredits;
    private javax.swing.JLabel lbCourseMaterial;
    private javax.swing.JLabel lbCourseName;
    private javax.swing.JTextArea taStudentMessage;
    private javax.swing.JTextField tfStudentGrade;
    // End of variables declaration//GEN-END:variables
}
